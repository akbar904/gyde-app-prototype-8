{
  "package_name": "com.com.walturn.aorteq_app",
  "project_description": "A Flutter project transformed into a medical study companion app called Aorteq, featuring authentication, exam selection, study planning, and personalized study plan generation using the MVVM architecture.",
  "architecture_overview": "The application follows the MVVM architecture with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection, and incorporates secure storage and API integration.",
  "folder_structure": {
    "lib": {
      "app": {
        "app.bottomsheets.dart": {},
        "app.dart": {},
        "app.dialogs.dart": {},
        "app.locator.dart": {},
        "app.router.dart": {}
      },
      "features": {
        "authentication": {
          "welcome_view.dart": {},
          "welcome_viewmodel.dart": {},
          "email_auth_view.dart": {},
          "email_auth_viewmodel.dart": {},
          "user_info_view.dart": {},
          "user_info_viewmodel.dart": {}
        },
        "exam_selection": {
          "exam_selection_view.dart": {},
          "exam_selection_viewmodel.dart": {},
          "topic_selection_view.dart": {},
          "topic_selection_viewmodel.dart": {},
          "study_time_view.dart": {},
          "study_time_viewmodel.dart": {},
          "exam_date_view.dart": {},
          "exam_date_viewmodel.dart": {}
        },
        "study_plan": {
          "study_plan_view.dart": {},
          "study_plan_viewmodel.dart": {}
        }
      },
      "ui": {
        "common": {
          "app_colors.dart": {},
          "ui_helpers.dart": {}
        }
      },
      "main.dart": {}
    }
  },
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes for authentication and study planning flows, services for navigation, and dialog management.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/features/authentication/welcome_view.dart",
        "package:my_app/features/exam_selection/exam_selection_view.dart",
        "package:my_app/features/study_plan/study_plan_view.dart"
      ]
    },
    {
      "name": "lib/features/authentication/welcome_view.dart",
      "description": "Displays the welcome screen with options for Google sign-in, email login, and sign-up.",
      "class_diagram": "@startuml\nclass WelcomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/authentication/welcome_viewmodel.dart",
      "description": "ViewModel for the WelcomeView, manages authentication logic.",
      "class_diagram": "@startuml\nclass WelcomeViewModel\n@enduml",
      "methods": [
        {
          "name": "signInWithGoogle",
          "description": "Handles Google sign-in process",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "navigateToEmailAuth",
          "description": "Navigates to the email authentication screen",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/exam_selection/exam_selection_view.dart",
      "description": "Allows users to select their targeted exam from a list.",
      "class_diagram": "@startuml\nclass ExamSelectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/exam_selection/exam_selection_viewmodel.dart",
      "description": "ViewModel for the ExamSelectionView, manages exam selection logic.",
      "class_diagram": "@startuml\nclass ExamSelectionViewModel\n@enduml",
      "methods": [
        {
          "name": "selectExam",
          "description": "Handles the selection of an exam",
          "parameters": [
            "String exam"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/study_plan/study_plan_view.dart",
      "description": "Displays the generated study plan with a breakdown of modules and hours.",
      "class_diagram": "@startuml\nclass StudyPlanView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/study_plan/study_plan_viewmodel.dart",
      "description": "ViewModel for the StudyPlanView, manages study plan generation and display logic.",
      "class_diagram": "@startuml\nclass StudyPlanViewModel\n@enduml",
      "methods": [
        {
          "name": "generateStudyPlan",
          "description": "Generates a personalized study plan based on user inputs",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/authentication/welcome_view.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant WelcomeView\nparticipant WelcomeViewModel\nparticipant EmailAuthView\nparticipant EmailAuthViewModel\nparticipant ExamSelectionView\nparticipant ExamSelectionViewModel\nparticipant StudyPlanView\nparticipant StudyPlanViewModel\n\nUser -> main: Launch app\nmain -> WelcomeView: Create and run\nWelcomeView -> WelcomeViewModel: Initialize\nUser -> WelcomeView: Choose authentication\nWelcomeViewModel -> EmailAuthView: Navigate\nEmailAuthView -> EmailAuthViewModel: Initialize\nEmailAuthViewModel -> ExamSelectionView: Navigate on completion\nExamSelectionView -> ExamSelectionViewModel: Initialize\nUser -> ExamSelectionView: Select exam\nExamSelectionViewModel -> StudyPlanView: Navigate on completion\nStudyPlanView -> StudyPlanViewModel: Initialize\nStudyPlanViewModel -> StudyPlanView: Display plan\n@enduml",
  "state_management_flow": "State is managed using the MVVM architecture. ViewModels handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs WelcomeView. WelcomeView initializes the MVVM architecture and handles authentication. After completing authentication, it navigates through exam selection and study planning flows, culminating in the StudyPlanView. Navigation between views is handled by the Stacked Router defined in app.router.dart."
}