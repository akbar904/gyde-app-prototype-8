{
  "package_name": "com.com.walturn.gyde_app",
  "project_description": "Gyde is a luxury chauffeur service app built with Flutter, featuring a comprehensive authentication flow, profile setup, booking management, and service features. The app follows a dark theme UI and implements the Stacked architecture with proper MVVM patterns.",
  "architecture_overview": "The application follows the Stacked architecture with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The architecture has been expanded to include new services for authentication, payment processing, location services, and data persistence.",
  "folder_structure": {
    "lib": {
      "app": {
        "app.bottomsheets.dart": {},
        "app.dart": {},
        "app.dialogs.dart": {},
        "app.locator.dart": {},
        "app.router.dart": {}
      },
      "features": {
        "authentication": {
          "splash_view.dart": {},
          "splash_viewmodel.dart": {},
          "welcome_view.dart": {},
          "welcome_viewmodel.dart": {},
          "phone_verification_view.dart": {},
          "phone_verification_viewmodel.dart": {},
          "email_collection_view.dart": {},
          "email_collection_viewmodel.dart": {},
          "terms_view.dart": {},
          "terms_viewmodel.dart": {}
        },
        "profile_setup": {
          "mode_selection_view.dart": {},
          "mode_selection_viewmodel.dart": {},
          "profile_information_view.dart": {},
          "profile_information_viewmodel.dart": {},
          "package_selection_view.dart": {},
          "package_selection_viewmodel.dart": {},
          "payment_method_view.dart": {},
          "payment_method_viewmodel.dart": {},
          "notification_permission_view.dart": {},
          "notification_permission_viewmodel.dart": {}
        },
        "home": {
          "home_view.dart": {},
          "home_viewmodel.dart": {}
        },
        "booking": {
          "one_way_booking_view.dart": {},
          "one_way_booking_viewmodel.dart": {},
          "multi_stop_booking_view.dart": {},
          "multi_stop_booking_viewmodel.dart": {},
          "hourly_booking_view.dart": {},
          "hourly_booking_viewmodel.dart": {}
        }
      },
      "ui": {
        "bottom_sheets": {
          "notice": {
            "notice_sheet.dart": {},
            "notice_sheet_model.dart": {}
          }
        },
        "common": {
          "app_colors.dart": {},
          "ui_helpers.dart": {}
        },
        "dialogs": {
          "info_alert": {
            "info_alert_dialog.dart": {},
            "info_alert_dialog_model.dart": {}
          }
        }
      },
      "main.dart": {}
    }
  },
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes for various views, services for authentication, payment, and navigation, and dialogs for user interactions.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/authentication/splash_view.dart",
        "package:my_app/features/home/home_view.dart"
      ]
    },
    {
      "name": "lib/features/authentication/splash_view.dart",
      "description": "Displays the splash screen with luxury car interior and chauffeur.",
      "class_diagram": "@startuml\nclass SplashView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/splash_viewmodel.dart",
      "description": "ViewModel for the SplashView, handles initialization logic.",
      "class_diagram": "@startuml\nclass SplashViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/welcome_view.dart",
      "description": "Displays the welcome page with options to get started.",
      "class_diagram": "@startuml\nclass WelcomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/welcome_viewmodel.dart",
      "description": "ViewModel for the WelcomeView, manages user interactions.",
      "class_diagram": "@startuml\nclass WelcomeViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/phone_verification_view.dart",
      "description": "Handles phone verification flow with input and verification code pages.",
      "class_diagram": "@startuml\nclass PhoneVerificationView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/phone_verification_viewmodel.dart",
      "description": "ViewModel for PhoneVerificationView, manages phone verification logic.",
      "class_diagram": "@startuml\nclass PhoneVerificationViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/email_collection_view.dart",
      "description": "Collects user's email for tailored services and updates.",
      "class_diagram": "@startuml\nclass EmailCollectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/email_collection_viewmodel.dart",
      "description": "ViewModel for EmailCollectionView, manages email collection logic.",
      "class_diagram": "@startuml\nclass EmailCollectionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/terms_view.dart",
      "description": "Displays terms and conditions with scrollable content.",
      "class_diagram": "@startuml\nclass TermsView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/terms_viewmodel.dart",
      "description": "ViewModel for TermsView, manages terms acceptance logic.",
      "class_diagram": "@startuml\nclass TermsViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/mode_selection_view.dart",
      "description": "Allows users to select their account mode (Business or Personal).",
      "class_diagram": "@startuml\nclass ModeSelectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/mode_selection_viewmodel.dart",
      "description": "ViewModel for ModeSelectionView, manages mode selection logic.",
      "class_diagram": "@startuml\nclass ModeSelectionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/profile_information_view.dart",
      "description": "Collects user's profile information including name and company.",
      "class_diagram": "@startuml\nclass ProfileInformationView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/profile_information_viewmodel.dart",
      "description": "ViewModel for ProfileInformationView, manages profile data logic.",
      "class_diagram": "@startuml\nclass ProfileInformationViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/package_selection_view.dart",
      "description": "Displays package options for users to select.",
      "class_diagram": "@startuml\nclass PackageSelectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/package_selection_viewmodel.dart",
      "description": "ViewModel for PackageSelectionView, manages package selection logic.",
      "class_diagram": "@startuml\nclass PackageSelectionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/payment_method_view.dart",
      "description": "Handles payment method selection and input.",
      "class_diagram": "@startuml\nclass PaymentMethodView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/payment_method_viewmodel.dart",
      "description": "ViewModel for PaymentMethodView, manages payment logic.",
      "class_diagram": "@startuml\nclass PaymentMethodViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/notification_permission_view.dart",
      "description": "Requests notification permissions from the user.",
      "class_diagram": "@startuml\nclass NotificationPermissionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/notification_permission_viewmodel.dart",
      "description": "ViewModel for NotificationPermissionView, manages notification logic.",
      "class_diagram": "@startuml\nclass NotificationPermissionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application, displaying chauffeur profiles and service categories.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic for home features.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/booking/one_way_booking_view.dart",
      "description": "Handles one-way booking flow with location input and chauffeur selection.",
      "class_diagram": "@startuml\nclass OneWayBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/one_way_booking_viewmodel.dart",
      "description": "ViewModel for OneWayBookingView, manages booking logic.",
      "class_diagram": "@startuml\nclass OneWayBookingViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/multi_stop_booking_view.dart",
      "description": "Handles multi-stop booking flow with route visualization.",
      "class_diagram": "@startuml\nclass MultiStopBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/multi_stop_booking_viewmodel.dart",
      "description": "ViewModel for MultiStopBookingView, manages multi-stop booking logic.",
      "class_diagram": "@startuml\nclass MultiStopBookingViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/hourly_booking_view.dart",
      "description": "Handles hourly booking flow with duration selection.",
      "class_diagram": "@startuml\nclass HourlyBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/hourly_booking_viewmodel.dart",
      "description": "ViewModel for HourlyBookingView, manages hourly booking logic.",
      "class_diagram": "@startuml\nclass HourlyBookingViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/authentication/splash_view.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant SplashView\nparticipant WelcomeView\nparticipant PhoneVerificationView\nparticipant EmailCollectionView\nparticipant TermsView\nparticipant ModeSelectionView\nparticipant ProfileInformationView\nparticipant PackageSelectionView\nparticipant PaymentMethodView\nparticipant NotificationPermissionView\nparticipant HomeView\n\nUser -> main: Launch app\nmain -> SplashView: Show splash screen\nSplashView -> WelcomeView: Navigate on completion\nWelcomeView -> PhoneVerificationView: Select phone verification\nPhoneVerificationView -> EmailCollectionView: Enter phone number\nEmailCollectionView -> TermsView: Enter email\nTermsView -> ModeSelectionView: Accept terms\nModeSelectionView -> ProfileInformationView: Select mode\nProfileInformationView -> PackageSelectionView: Enter profile info\nPackageSelectionView -> PaymentMethodView: Select package\nPaymentMethodView -> NotificationPermissionView: Enter payment details\nNotificationPermissionView -> HomeView: Grant permissions\nUser -> HomeView: Interact\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. ViewModels handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views. Authentication, booking, and profile setup flows are managed by their respective ViewModels.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs SplashView. SplashView transitions to WelcomeView, which guides the user through authentication and profile setup. After completing the setup, it navigates to HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart."
}