{
  "package_name": "com.com.walturn.aorteq_app",
  "project_description": "AorteQ is a comprehensive Flutter web application designed as a study companion for the USMLE Step 1 exam. It features a robust authentication system, allowing users to log in via email, Google, or Apple accounts. The application includes a customizable study plan setup, an interactive question bank interface, and a progress tracking dashboard that provides insights into users' study habits and performance. The UI is crafted with a clean, medical-professional aesthetic to enhance the user experience and facilitate effective learning.",
  "architecture_overview": "The application employs the Stacked architecture, which promotes a clear separation of concerns through distinct layers. The architecture consists of several key components: the UI layer, which includes views like LoginView, StudyPlanView, ProgressDashboardView, and QuestionView; the ViewModel layer, which manages the state and business logic for each view; and the Repository layer, responsible for data operations such as fetching and saving study plans, user authentication, and question retrieval. The app utilizes Stacked for state management, routing, and dependency injection, ensuring efficient navigation and data handling. Custom dialogs and bottom sheets are integrated for user interactions, enhancing the overall functionality.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes for LoginView, StudyPlanView, and ProgressDashboardView, along with services for BottomSheetService, DialogService, and NavigationService.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/authentication/login_view.dart",
        "package:my_app/features/study_plan/study_plan_view.dart",
        "package:my_app/features/progress_tracking/progress_dashboard_view.dart"
      ]
    },
    {
      "name": "lib/features/authentication/login_view.dart",
      "description": "Defines the login view for user authentication, featuring input fields for email and password, and buttons for login and social sign-in options.",
      "class_diagram": "@startuml\nclass LoginView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/authentication/login_viewmodel.dart",
      "description": "ViewModel for the LoginView, manages authentication logic and state.",
      "class_diagram": "@startuml\nclass LoginViewModel\n@enduml",
      "methods": [
        {
          "name": "login",
          "description": "Handles user login with email and password.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "signInWithGoogle",
          "description": "Handles Google sign-in.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "signInWithApple",
          "description": "Handles Apple sign-in.",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/features/authentication/auth_repository.dart"
      ]
    },
    {
      "name": "lib/features/authentication/auth_repository.dart",
      "description": "Repository for handling authentication data operations.",
      "class_diagram": "@startuml\nclass AuthRepository\n@enduml",
      "methods": [
        {
          "name": "login",
          "description": "Logs in the user with email and password.",
          "parameters": [
            "String email",
            "String password"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "signInWithGoogle",
          "description": "Handles Google sign-in.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "signInWithApple",
          "description": "Handles Apple sign-in.",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:firebase_auth/firebase_auth.dart"
      ]
    },
    {
      "name": "lib/features/study_plan/study_plan_view.dart",
      "description": "Defines the view for setting up the initial study plan using a three-step wizard interface.",
      "class_diagram": "@startuml\nclass StudyPlanView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/study_plan/study_plan_viewmodel.dart",
      "description": "ViewModel for the StudyPlanView, manages the study plan setup logic.",
      "class_diagram": "@startuml\nclass StudyPlanViewModel\n@enduml",
      "methods": [
        {
          "name": "setExamDate",
          "description": "Sets the exam date for the study plan.",
          "parameters": [
            "DateTime date"
          ],
          "return_type": "void"
        },
        {
          "name": "selectTopics",
          "description": "Selects topics for the study plan.",
          "parameters": [
            "List<String> topics"
          ],
          "return_type": "void"
        },
        {
          "name": "generateStudySchedule",
          "description": "Generates a study schedule based on user input.",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/study_plan/study_plan_repository.dart"
      ]
    },
    {
      "name": "lib/features/study_plan/study_plan_repository.dart",
      "description": "Repository for handling study plan data operations.",
      "class_diagram": "@startuml\nclass StudyPlanRepository\n@enduml",
      "methods": [
        {
          "name": "saveStudyPlan",
          "description": "Saves the study plan to the database.",
          "parameters": [
            "StudyPlan studyPlan"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "fetchStudyPlan",
          "description": "Fetches the saved study plan from the database.",
          "parameters": [],
          "return_type": "Future<StudyPlan>"
        }
      ],
      "dependencies": [
        "package:cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/features/question_bank/question_view.dart",
      "description": "Defines the view for displaying questions from the question bank.",
      "class_diagram": "@startuml\nclass QuestionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/question_bank/question_viewmodel.dart",
      "description": "ViewModel for the QuestionView, manages question display and user interactions.",
      "class_diagram": "@startuml\nclass QuestionViewModel\n@enduml",
      "methods": [
        {
          "name": "loadQuestions",
          "description": "Loads questions from the question bank.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "selectAnswer",
          "description": "Selects an answer for the current question.",
          "parameters": [
            "String answer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/question_bank/question_repository.dart"
      ]
    },
    {
      "name": "lib/features/question_bank/question_repository.dart",
      "description": "Repository for handling question bank data operations.",
      "class_diagram": "@startuml\nclass QuestionRepository\n@enduml",
      "methods": [
        {
          "name": "fetchQuestions",
          "description": "Fetches questions from the database.",
          "parameters": [],
          "return_type": "Future<List<Question>>"
        }
      ],
      "dependencies": [
        "package:cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/features/progress_tracking/progress_dashboard_view.dart",
      "description": "Defines the view for displaying the user's progress and performance metrics.",
      "class_diagram": "@startuml\nclass ProgressDashboardView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/progress_tracking/progress_dashboard_viewmodel.dart",
      "description": "ViewModel for the ProgressDashboardView, manages progress tracking logic.",
      "class_diagram": "@startuml\nclass ProgressDashboardViewModel\n@enduml",
      "methods": [
        {
          "name": "loadProgress",
          "description": "Loads the user's progress data.",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/progress_tracking/progress_repository.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app.",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/authentication/login_view.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.2",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.4.0",
      "purpose": "Services for Stacked architecture, including dialog and bottom sheet management"
    },
    {
      "name": "firebase_auth",
      "version": "^4.5.0",
      "purpose": "Firebase authentication for user login and account management"
    },
    {
      "name": "cloud_firestore",
      "version": "^4.5.0",
      "purpose": "Cloud Firestore for data storage and retrieval"
    },
    {
      "name": "gap",
      "version": "^3.0.1",
      "purpose": "Creating gaps in layouts for better UI spacing"
    },
    {
      "name": "intl",
      "version": "^0.18.0",
      "purpose": "Internationalization and localization support"
    },
    {
      "name": "file_picker",
      "version": "^8.1.2",
      "purpose": "File picking functionality for selecting files from the device"
    },
    {
      "name": "equatable",
      "version": "^2.0.5",
      "purpose": "Simplifies equality comparisons for Dart objects"
    },
    {
      "name": "logger",
      "version": "^1.4.0",
      "purpose": "Logging utility for debugging and tracking application behavior"
    },
    {
      "name": "url_launcher",
      "version": "^6.3.0",
      "purpose": "Launching URLs in the mobile platform"
    },
    {
      "name": "google_sign_in",
      "version": "^6.1.0",
      "purpose": "Google sign-in functionality for authentication"
    },
    {
      "name": "provider",
      "version": "^6.1.3",
      "purpose": "State management solution for Flutter applications"
    },
    {
      "name": "chart_flutter",
      "version": "^0.5.0",
      "purpose": "Charting library for displaying data visualizations"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AorteQApp\nparticipant LoginView\nparticipant LoginViewModel\nparticipant StudyPlanView\nparticipant StudyPlanViewModel\nparticipant QuestionView\nparticipant QuestionViewModel\nparticipant ProgressDashboardView\nparticipant ProgressDashboardViewModel\nparticipant BottomSheetService\nparticipant DialogService\n\nUser -> main: Launch app\nmain -> AorteQApp: Create and run\nAorteQApp -> LoginView: Show login\nUser -> LoginView: Enter credentials\nLoginView -> LoginViewModel: Call login\nLoginViewModel -> AuthRepository: Authenticate user\nAuthRepository -> LoginViewModel: Return success\nLoginViewModel -> AorteQApp: Navigate to StudyPlanView\nStudyPlanView -> StudyPlanViewModel: Initialize\nUser -> StudyPlanView: Set exam date and topics\nStudyPlanViewModel -> StudyPlanRepository: Save study plan\nStudyPlanRepository -> StudyPlanViewModel: Confirm save\nUser -> StudyPlanView: Generate schedule\nUser -> QuestionView: Start answering questions\nQuestionViewModel -> QuestionRepository: Fetch questions\nUser -> ProgressDashboardView: View progress\nProgressDashboardViewModel -> ProgressRepository: Load progress\nUser -> BottomSheetService: Show notice\nUser -> DialogService: Show info alert\n@enduml",
  "state_management_flow": "State management is handled using the Stacked architecture, where each view has a corresponding ViewModel (e.g., LoginViewModel, StudyPlanViewModel, QuestionViewModel, ProgressDashboardViewModel). These ViewModels manage the business logic and state for their respective views. The app.locator.dart file sets up dependency injection for services like BottomSheetService and DialogService. State is initialized when the ViewModel is created and cleaned up when the view is disposed. Loading and error states are managed using reactive properties, allowing the UI to respond to changes in state effectively.",
  "navigation_flow": "The application starts with main.dart, which initializes the AorteQApp and sets up the Stacked architecture. The initial route is defined in app.router.dart, leading to the LoginView. Upon successful authentication, the app navigates to the StudyPlanView. Users can navigate to the QuestionView and ProgressDashboardView as needed. Navigation is handled by the NavigationService, which allows for easy route management and state preservation during transitions. Route definitions are specified in the StackedApp annotation, and deep linking is not currently implemented."
}