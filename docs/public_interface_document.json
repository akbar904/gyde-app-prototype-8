{
  "package_name": "com.com.walturn.gyde_app",
  "project_description": "Gyde is a luxury chauffeur service app built with Flutter using the Stacked architecture. It features comprehensive authentication, profile setup, booking management, and ride scheduling, all within a dark theme UI.",
  "architecture_overview": "The application follows the Stacked architecture with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The architecture has been expanded to include services for authentication, location, payment processing, and data persistence.",
  "folder_structure": {
    "lib": {
      "app": {
        "app.bottomsheets.dart": {},
        "app.dart": {},
        "app.dialogs.dart": {},
        "app.locator.dart": {},
        "app.router.dart": {}
      },
      "features": {
        "authentication": {
          "splash_view.dart": {},
          "welcome_view.dart": {},
          "phone_verification_view.dart": {},
          "email_collection_view.dart": {},
          "terms_view.dart": {}
        },
        "profile_setup": {
          "mode_selection_view.dart": {},
          "profile_information_view.dart": {},
          "package_selection_view.dart": {},
          "payment_method_view.dart": {},
          "notification_permission_view.dart": {}
        },
        "home": {
          "home_view.dart": {},
          "home_viewmodel.dart": {}
        },
        "booking": {
          "one_way_booking_view.dart": {},
          "multi_stop_booking_view.dart": {},
          "hourly_booking_view.dart": {}
        },
        "startup": {
          "startup_view.dart": {},
          "startup_viewmodel.dart": {}
        }
      },
      "ui": {
        "bottom_sheets": {
          "notice": {
            "notice_sheet.dart": {},
            "notice_sheet_model.dart": {}
          }
        },
        "common": {
          "app_colors.dart": {},
          "ui_helpers.dart": {}
        },
        "dialogs": {
          "info_alert": {
            "info_alert_dialog.dart": {},
            "info_alert_dialog_model.dart": {}
          }
        }
      },
      "main.dart": {}
    }
  },
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes for authentication, profile setup, home, and booking features. The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/authentication/splash_view.dart",
      "description": "Displays the splash screen with a luxury car interior and chauffeur.",
      "class_diagram": "@startuml\nclass SplashView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/authentication/welcome_view.dart",
      "description": "Displays the welcome page with options to get started and experience luxury travel.",
      "class_diagram": "@startuml\nclass WelcomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/authentication/phone_verification_view.dart",
      "description": "Handles phone number input and verification code entry.",
      "class_diagram": "@startuml\nclass PhoneVerificationView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/authentication/email_collection_view.dart",
      "description": "Collects user email for tailored services and updates.",
      "class_diagram": "@startuml\nclass EmailCollectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/authentication/terms_view.dart",
      "description": "Displays the terms and conditions with scrollable content.",
      "class_diagram": "@startuml\nclass TermsView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/mode_selection_view.dart",
      "description": "Allows users to select between business and personal modes.",
      "class_diagram": "@startuml\nclass ModeSelectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/profile_information_view.dart",
      "description": "Collects user profile information including name and company.",
      "class_diagram": "@startuml\nclass ProfileInformationView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/package_selection_view.dart",
      "description": "Displays package options for subscription.",
      "class_diagram": "@startuml\nclass PackageSelectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/payment_method_view.dart",
      "description": "Handles payment method selection and input.",
      "class_diagram": "@startuml\nclass PaymentMethodView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/notification_permission_view.dart",
      "description": "Requests notification permissions from the user.",
      "class_diagram": "@startuml\nclass NotificationPermissionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application, displaying chauffeur profiles and service categories.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/booking/one_way_booking_view.dart",
      "description": "Handles one-way booking with location input and chauffeur selection.",
      "class_diagram": "@startuml\nclass OneWayBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/booking/multi_stop_booking_view.dart",
      "description": "Handles multi-stop booking with route visualization.",
      "class_diagram": "@startuml\nclass MultiStopBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/booking/hourly_booking_view.dart",
      "description": "Handles hourly booking with duration selection.",
      "class_diagram": "@startuml\nclass HourlyBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant SplashView\nparticipant WelcomeView\nparticipant PhoneVerificationView\nparticipant EmailCollectionView\nparticipant TermsView\nparticipant ModeSelectionView\nparticipant ProfileInformationView\nparticipant PackageSelectionView\nparticipant PaymentMethodView\nparticipant NotificationPermissionView\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> SplashView: Show splash screen\nSplashView -> WelcomeView: Navigate on completion\nWelcomeView -> PhoneVerificationView: Select phone verification\nPhoneVerificationView -> EmailCollectionView: Enter phone number\nEmailCollectionView -> TermsView: Enter email\nTermsView -> ModeSelectionView: Accept terms\nModeSelectionView -> ProfileInformationView: Select mode\nProfileInformationView -> PackageSelectionView: Enter profile info\nPackageSelectionView -> PaymentMethodView: Select package\nPaymentMethodView -> NotificationPermissionView: Enter payment info\nNotificationPermissionView -> HomeView: Grant permissions\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. ViewModels handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views. Authentication, booking, and profile setup flows are managed with dedicated ViewModels.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs AppView. AppView initializes the Stacked architecture and shows the SplashView. The app then navigates through the authentication and profile setup flows before reaching the HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart."
}