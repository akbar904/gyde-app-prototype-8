{
  "package_name": "com.com.walturn.gyde_app",
  "project_description": "A Flutter project transformed into a luxury chauffeur service app called Gyde, featuring a comprehensive authentication flow, profile setup, booking flows, and a new homepage layout, all following a dark theme UI.",
  "architecture_overview": "The application follows the Stacked architecture with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The app has been expanded to include authentication, profile setup, and booking flows.",
  "folder_structure": {
    "lib": {
      "app": {
        "app.bottomsheets.dart": {},
        "app.dart": {},
        "app.dialogs.dart": {},
        "app.locator.dart": {},
        "app.router.dart": {}
      },
      "features": {
        "authentication": {
          "splash_view.dart": {},
          "splash_viewmodel.dart": {},
          "welcome_view.dart": {},
          "welcome_viewmodel.dart": {},
          "phone_verification_view.dart": {},
          "phone_verification_viewmodel.dart": {},
          "email_collection_view.dart": {},
          "email_collection_viewmodel.dart": {},
          "terms_view.dart": {},
          "terms_viewmodel.dart": {}
        },
        "profile_setup": {
          "mode_selection_view.dart": {},
          "mode_selection_viewmodel.dart": {},
          "profile_information_view.dart": {},
          "profile_information_viewmodel.dart": {},
          "package_selection_view.dart": {},
          "package_selection_viewmodel.dart": {},
          "payment_method_view.dart": {},
          "payment_method_viewmodel.dart": {},
          "notification_permission_view.dart": {},
          "notification_permission_viewmodel.dart": {}
        },
        "home": {
          "home_view.dart": {},
          "home_viewmodel.dart": {}
        },
        "booking": {
          "one_way_booking_view.dart": {},
          "one_way_booking_viewmodel.dart": {},
          "multi_stop_booking_view.dart": {},
          "multi_stop_booking_viewmodel.dart": {},
          "hourly_booking_view.dart": {},
          "hourly_booking_viewmodel.dart": {}
        }
      },
      "ui": {
        "bottom_sheets": {
          "notice": {
            "notice_sheet.dart": {},
            "notice_sheet_model.dart": {}
          }
        },
        "common": {
          "app_colors.dart": {},
          "ui_helpers.dart": {}
        },
        "dialogs": {
          "info_alert": {
            "info_alert_dialog.dart": {},
            "info_alert_dialog_model.dart": {}
          }
        }
      },
      "main.dart": {}
    }
  },
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes for authentication, profile setup, home, and booking flows, services, bottom sheets, and dialogs.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/authentication/splash_view.dart",
        "package:my_app/features/profile_setup/mode_selection_view.dart",
        "package:my_app/features/booking/one_way_booking_view.dart"
      ]
    },
    {
      "name": "lib/features/authentication/splash_view.dart",
      "description": "Splash screen showing luxury car interior and chauffeur.",
      "class_diagram": "@startuml\nclass SplashView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/splash_viewmodel.dart",
      "description": "ViewModel for the SplashView, handles splash screen logic.",
      "class_diagram": "@startuml\nclass SplashViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/welcome_view.dart",
      "description": "Welcome page with 'Get Started' button and introductory text.",
      "class_diagram": "@startuml\nclass WelcomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/welcome_viewmodel.dart",
      "description": "ViewModel for the WelcomeView, manages navigation to authentication options.",
      "class_diagram": "@startuml\nclass WelcomeViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/phone_verification_view.dart",
      "description": "Phone verification flow with country code selector and verification code input.",
      "class_diagram": "@startuml\nclass PhoneVerificationView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/phone_verification_viewmodel.dart",
      "description": "ViewModel for the PhoneVerificationView, handles phone verification logic.",
      "class_diagram": "@startuml\nclass PhoneVerificationViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/email_collection_view.dart",
      "description": "Email collection page for user to provide email for tailored services.",
      "class_diagram": "@startuml\nclass EmailCollectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/email_collection_viewmodel.dart",
      "description": "ViewModel for the EmailCollectionView, manages email submission logic.",
      "class_diagram": "@startuml\nclass EmailCollectionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/terms_view.dart",
      "description": "Terms and conditions page with scrollable content.",
      "class_diagram": "@startuml\nclass TermsView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/authentication/terms_viewmodel.dart",
      "description": "ViewModel for the TermsView, manages terms acceptance logic.",
      "class_diagram": "@startuml\nclass TermsViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/mode_selection_view.dart",
      "description": "Mode selection screen for choosing between Business and Personal modes.",
      "class_diagram": "@startuml\nclass ModeSelectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/mode_selection_viewmodel.dart",
      "description": "ViewModel for the ModeSelectionView, handles mode selection logic.",
      "class_diagram": "@startuml\nclass ModeSelectionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/profile_information_view.dart",
      "description": "Profile information screen with input fields for personal details.",
      "class_diagram": "@startuml\nclass ProfileInformationView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/profile_information_viewmodel.dart",
      "description": "ViewModel for the ProfileInformationView, manages profile data submission.",
      "class_diagram": "@startuml\nclass ProfileInformationViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/package_selection_view.dart",
      "description": "Package selection screen showing different service packages.",
      "class_diagram": "@startuml\nclass PackageSelectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/package_selection_viewmodel.dart",
      "description": "ViewModel for the PackageSelectionView, handles package selection logic.",
      "class_diagram": "@startuml\nclass PackageSelectionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/payment_method_view.dart",
      "description": "Payment method screen with options for credit card, Apple Pay, and bank connection.",
      "class_diagram": "@startuml\nclass PaymentMethodView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/payment_method_viewmodel.dart",
      "description": "ViewModel for the PaymentMethodView, manages payment method logic.",
      "class_diagram": "@startuml\nclass PaymentMethodViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/notification_permission_view.dart",
      "description": "Notification permission screen for enabling notifications.",
      "class_diagram": "@startuml\nclass NotificationPermissionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/profile_setup/notification_permission_viewmodel.dart",
      "description": "ViewModel for the NotificationPermissionView, handles notification permission logic.",
      "class_diagram": "@startuml\nclass NotificationPermissionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/one_way_booking_view.dart",
      "description": "One-way booking flow with location input and chauffeur selection.",
      "class_diagram": "@startuml\nclass OneWayBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/one_way_booking_viewmodel.dart",
      "description": "ViewModel for the OneWayBookingView, manages booking logic.",
      "class_diagram": "@startuml\nclass OneWayBookingViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/multi_stop_booking_view.dart",
      "description": "Multi-stop booking flow with route visualization and duration calculation.",
      "class_diagram": "@startuml\nclass MultiStopBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/multi_stop_booking_viewmodel.dart",
      "description": "ViewModel for the MultiStopBookingView, manages multi-stop booking logic.",
      "class_diagram": "@startuml\nclass MultiStopBookingViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/hourly_booking_view.dart",
      "description": "Hourly booking flow with duration selection and pricing calculation.",
      "class_diagram": "@startuml\nclass HourlyBookingView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/booking/hourly_booking_viewmodel.dart",
      "description": "ViewModel for the HourlyBookingView, manages hourly booking logic.",
      "class_diagram": "@startuml\nclass HourlyBookingViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/authentication/splash_view.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant SplashView\nparticipant WelcomeView\nparticipant PhoneVerificationView\nparticipant EmailCollectionView\nparticipant TermsView\nparticipant ModeSelectionView\nparticipant ProfileInformationView\nparticipant PackageSelectionView\nparticipant PaymentMethodView\nparticipant NotificationPermissionView\nparticipant HomeView\nparticipant OneWayBookingView\n\nUser -> main: Launch app\nmain -> SplashView: Show splash\nSplashView -> WelcomeView: Navigate\nUser -> WelcomeView: Get Started\nWelcomeView -> PhoneVerificationView: Navigate\nUser -> PhoneVerificationView: Enter phone\nPhoneVerificationView -> EmailCollectionView: Navigate\nUser -> EmailCollectionView: Enter email\nEmailCollectionView -> TermsView: Navigate\nUser -> TermsView: Accept terms\nTermsView -> ModeSelectionView: Navigate\nUser -> ModeSelectionView: Select mode\nModeSelectionView -> ProfileInformationView: Navigate\nUser -> ProfileInformationView: Enter details\nProfileInformationView -> PackageSelectionView: Navigate\nUser -> PackageSelectionView: Select package\nPackageSelectionView -> PaymentMethodView: Navigate\nUser -> PaymentMethodView: Enter payment\nPaymentMethodView -> NotificationPermissionView: Navigate\nUser -> NotificationPermissionView: Allow notifications\nNotificationPermissionView -> HomeView: Navigate\nUser -> HomeView: Interact\nHomeView -> OneWayBookingView: Book ride\nUser -> OneWayBookingView: Enter details\nOneWayBookingView -> HomeView: Confirm booking\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. ViewModels handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views. New flows for authentication, profile setup, and booking are integrated.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs SplashView. SplashView transitions to WelcomeView, leading through authentication and profile setup flows before reaching HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart."
}